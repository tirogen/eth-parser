// Code generated by MockGen. DO NOT EDIT.
// Source: wss.go
//
// Generated by this command:
//
//	mockgen -source=wss.go -destination=wss_mocks.go -package=ethparser
//
// Package ethparser is a generated GoMock package.
package ethparser

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWebSocketConnect is a mock of WebSocketConnect interface.
type MockWebSocketConnect struct {
	ctrl     *gomock.Controller
	recorder *MockWebSocketConnectMockRecorder
}

// MockWebSocketConnectMockRecorder is the mock recorder for MockWebSocketConnect.
type MockWebSocketConnectMockRecorder struct {
	mock *MockWebSocketConnect
}

// NewMockWebSocketConnect creates a new mock instance.
func NewMockWebSocketConnect(ctrl *gomock.Controller) *MockWebSocketConnect {
	mock := &MockWebSocketConnect{ctrl: ctrl}
	mock.recorder = &MockWebSocketConnectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebSocketConnect) EXPECT() *MockWebSocketConnectMockRecorder {
	return m.recorder
}

// Subscribe mocks base method.
func (m *MockWebSocketConnect) Subscribe(ctx context.Context, method string) (<-chan string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, method)
	ret0, _ := ret[0].(<-chan string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockWebSocketConnectMockRecorder) Subscribe(ctx, method any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockWebSocketConnect)(nil).Subscribe), ctx, method)
}
